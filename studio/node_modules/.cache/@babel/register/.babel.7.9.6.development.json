{
  "{\"sourceRoot\":\"/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/\",\"compact\":false,\"root\":\"/Users/jap/Coding/work/experiments/2020-personal-site/studio\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/jap/Coding/work/experiments/2020-personal-site/studio\",\"filename\":\"/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/schema.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-react-jsx\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"JSXNamespacedName\":{\"enter\":[null]},\"JSXSpreadChild\":{\"enter\":[null]},\"JSXElement\":{\"exit\":[null]},\"JSXFragment\":{\"exit\":[null]},\"Program\":{\"enter\":[null],\"exit\":[null]},\"JSXAttribute\":{\"enter\":[null]}},\"options\":{\"pragma\":\"React.createElement\",\"pragmaFrag\":\"React.Fragment\",\"runtime\":\"classic\",\"throwIfNamespace\":true,\"useBuiltIns\":false}},{\"key\":\"transform-react-display-name\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}}],\"presets\":[]}:7.9.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/",
      "compact": false,
      "root": "/Users/jap/Coding/work/experiments/2020-personal-site/studio",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/jap/Coding/work/experiments/2020-personal-site/studio",
      "filename": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/schema.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-react-jsx",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "JSXNamespacedName": {
              "enter": [
                null
              ]
            },
            "JSXSpreadChild": {
              "enter": [
                null
              ]
            },
            "JSXElement": {
              "exit": [
                null
              ]
            },
            "JSXFragment": {
              "exit": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "JSXAttribute": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "pragma": "React.createElement",
            "pragmaFrag": "React.Fragment",
            "runtime": "classic",
            "throwIfNamespace": true,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-react-display-name",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/schema.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "jsx"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/schema.js",
        "comments": true,
        "compact": false,
        "sourceMaps": "both",
        "sourceRoot": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/",
        "sourceFileName": "schema.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _schemaCreator = _interopRequireDefault(require(\"part:@sanity/base/schema-creator\"));\n\nvar _schemaType = _interopRequireDefault(require(\"all:part:@sanity/base/schema-type\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// First, we must import the schema creator\n// Then import schema types from any plugins that might expose them\n// Then we give our schema to the builder and provide the result to Sanity\nvar _default = (0, _schemaCreator.default)({\n  // We name our schema\n  name: \"default\",\n  // Then proceed to concatenate our document type\n  // to the ones provided by any plugins that are installed\n  types: _schemaType.default.concat([{\n    // This is the display name for the type\n    title: \"Person\",\n    // The identifier for this document type used in the api's\n    name: \"person\",\n    // Documents have the type 'document'. Your schema may describe types beyond documents\n    // but let's get back to that later.\n    type: \"document\",\n    // Now we proceed to list the fields of our document\n    fields: [// This document has only one field\n    {\n      // The display name for this field\n      title: \"Name\",\n      // The identifier for this field used in the api's\n      name: \"name\",\n      // The type of this field\n      type: \"string\"\n    }]\n  }])\n});\n\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVtYS5qcyJdLCJuYW1lcyI6WyJuYW1lIiwidHlwZXMiLCJzY2hlbWFUeXBlcyIsImNvbmNhdCIsInRpdGxlIiwidHlwZSIsImZpZWxkcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUdBOzs7O0FBSkE7QUFHQTtBQUdBO2VBQ2UsNEJBQWE7QUFDMUI7QUFDQUEsRUFBQUEsSUFBSSxFQUFFLFNBRm9CO0FBRzFCO0FBQ0E7QUFDQUMsRUFBQUEsS0FBSyxFQUFFQyxvQkFBWUMsTUFBWixDQUFtQixDQUN4QjtBQUNFO0FBQ0FDLElBQUFBLEtBQUssRUFBRSxRQUZUO0FBSUU7QUFDQUosSUFBQUEsSUFBSSxFQUFFLFFBTFI7QUFPRTtBQUNBO0FBQ0FLLElBQUFBLElBQUksRUFBRSxVQVRSO0FBV0U7QUFDQUMsSUFBQUEsTUFBTSxFQUFFLENBQ047QUFDQTtBQUNFO0FBQ0FGLE1BQUFBLEtBQUssRUFBRSxNQUZUO0FBSUU7QUFDQUosTUFBQUEsSUFBSSxFQUFFLE1BTFI7QUFPRTtBQUNBSyxNQUFBQSxJQUFJLEVBQUU7QUFSUixLQUZNO0FBWlYsR0FEd0IsQ0FBbkI7QUFMbUIsQ0FBYixDIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qYXAvQ29kaW5nL3dvcmsvZXhwZXJpbWVudHMvMjAyMC1wZXJzb25hbC1zaXRlL3N0dWRpby9zY2hlbWFzLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpcnN0LCB3ZSBtdXN0IGltcG9ydCB0aGUgc2NoZW1hIGNyZWF0b3JcbmltcG9ydCBjcmVhdGVTY2hlbWEgZnJvbSBcInBhcnQ6QHNhbml0eS9iYXNlL3NjaGVtYS1jcmVhdG9yXCI7XG5cbi8vIFRoZW4gaW1wb3J0IHNjaGVtYSB0eXBlcyBmcm9tIGFueSBwbHVnaW5zIHRoYXQgbWlnaHQgZXhwb3NlIHRoZW1cbmltcG9ydCBzY2hlbWFUeXBlcyBmcm9tIFwiYWxsOnBhcnQ6QHNhbml0eS9iYXNlL3NjaGVtYS10eXBlXCI7XG5cbi8vIFRoZW4gd2UgZ2l2ZSBvdXIgc2NoZW1hIHRvIHRoZSBidWlsZGVyIGFuZCBwcm92aWRlIHRoZSByZXN1bHQgdG8gU2FuaXR5XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTY2hlbWEoe1xuICAvLyBXZSBuYW1lIG91ciBzY2hlbWFcbiAgbmFtZTogXCJkZWZhdWx0XCIsXG4gIC8vIFRoZW4gcHJvY2VlZCB0byBjb25jYXRlbmF0ZSBvdXIgZG9jdW1lbnQgdHlwZVxuICAvLyB0byB0aGUgb25lcyBwcm92aWRlZCBieSBhbnkgcGx1Z2lucyB0aGF0IGFyZSBpbnN0YWxsZWRcbiAgdHlwZXM6IHNjaGVtYVR5cGVzLmNvbmNhdChbXG4gICAge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZGlzcGxheSBuYW1lIGZvciB0aGUgdHlwZVxuICAgICAgdGl0bGU6IFwiUGVyc29uXCIsXG5cbiAgICAgIC8vIFRoZSBpZGVudGlmaWVyIGZvciB0aGlzIGRvY3VtZW50IHR5cGUgdXNlZCBpbiB0aGUgYXBpJ3NcbiAgICAgIG5hbWU6IFwicGVyc29uXCIsXG5cbiAgICAgIC8vIERvY3VtZW50cyBoYXZlIHRoZSB0eXBlICdkb2N1bWVudCcuIFlvdXIgc2NoZW1hIG1heSBkZXNjcmliZSB0eXBlcyBiZXlvbmQgZG9jdW1lbnRzXG4gICAgICAvLyBidXQgbGV0J3MgZ2V0IGJhY2sgdG8gdGhhdCBsYXRlci5cbiAgICAgIHR5cGU6IFwiZG9jdW1lbnRcIixcblxuICAgICAgLy8gTm93IHdlIHByb2NlZWQgdG8gbGlzdCB0aGUgZmllbGRzIG9mIG91ciBkb2N1bWVudFxuICAgICAgZmllbGRzOiBbXG4gICAgICAgIC8vIFRoaXMgZG9jdW1lbnQgaGFzIG9ubHkgb25lIGZpZWxkXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBUaGUgZGlzcGxheSBuYW1lIGZvciB0aGlzIGZpZWxkXG4gICAgICAgICAgdGl0bGU6IFwiTmFtZVwiLFxuXG4gICAgICAgICAgLy8gVGhlIGlkZW50aWZpZXIgZm9yIHRoaXMgZmllbGQgdXNlZCBpbiB0aGUgYXBpJ3NcbiAgICAgICAgICBuYW1lOiBcIm5hbWVcIixcblxuICAgICAgICAgIC8vIFRoZSB0eXBlIG9mIHRoaXMgZmllbGRcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdKSxcbn0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "schema.js"
      ],
      "names": [
        "name",
        "types",
        "schemaTypes",
        "concat",
        "title",
        "type",
        "fields"
      ],
      "mappings": ";;;;;;;AACA;;AAGA;;;;AAJA;AAGA;AAGA;eACe,4BAAa;AAC1B;AACAA,EAAAA,IAAI,EAAE,SAFoB;AAG1B;AACA;AACAC,EAAAA,KAAK,EAAEC,oBAAYC,MAAZ,CAAmB,CACxB;AACE;AACAC,IAAAA,KAAK,EAAE,QAFT;AAIE;AACAJ,IAAAA,IAAI,EAAE,QALR;AAOE;AACA;AACAK,IAAAA,IAAI,EAAE,UATR;AAWE;AACAC,IAAAA,MAAM,EAAE,CACN;AACA;AACE;AACAF,MAAAA,KAAK,EAAE,MAFT;AAIE;AACAJ,MAAAA,IAAI,EAAE,MALR;AAOE;AACAK,MAAAA,IAAI,EAAE;AARR,KAFM;AAZV,GADwB,CAAnB;AALmB,CAAb,C",
      "sourceRoot": "/Users/jap/Coding/work/experiments/2020-personal-site/studio/schemas/",
      "sourcesContent": [
        "// First, we must import the schema creator\nimport createSchema from \"part:@sanity/base/schema-creator\";\n\n// Then import schema types from any plugins that might expose them\nimport schemaTypes from \"all:part:@sanity/base/schema-type\";\n\n// Then we give our schema to the builder and provide the result to Sanity\nexport default createSchema({\n  // We name our schema\n  name: \"default\",\n  // Then proceed to concatenate our document type\n  // to the ones provided by any plugins that are installed\n  types: schemaTypes.concat([\n    {\n      // This is the display name for the type\n      title: \"Person\",\n\n      // The identifier for this document type used in the api's\n      name: \"person\",\n\n      // Documents have the type 'document'. Your schema may describe types beyond documents\n      // but let's get back to that later.\n      type: \"document\",\n\n      // Now we proceed to list the fields of our document\n      fields: [\n        // This document has only one field\n        {\n          // The display name for this field\n          title: \"Name\",\n\n          // The identifier for this field used in the api's\n          name: \"name\",\n\n          // The type of this field\n          type: \"string\",\n        },\n      ],\n    },\n  ]),\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1590292133942
  }
}